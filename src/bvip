#!/usr/bin/env bash

# @describe BreachVIP API client for breach data search
# @arg term "Search term to look up" [string]
# @arg fields* "Fields to search (ip, domain, steamid, name, uuid, username, email, discordid, phone, password)" [string]
# @option -c --categories "Categories to filter by (only 'minecraft' supported currently)" [string]
# @flag   -w --wildcard "Enable wildcard search (* and ? operators)"
# @flag   -s --case-sensitive "Enable case-sensitive search"
# @flag   -j --json "Output raw JSON instead of formatted results"
# @flag   -q --quiet "Suppress colored output"
# @meta require-tools curl,jq

eval "$(argc --argc-eval "$0" "$@")"

setup_colors() {
  if [ "$argc_quiet" = 1 ] || [ -z "$TERM" ] || [ "$TERM" = "dumb" ]; then
    bold="" reset="" blue="" green="" yellow="" cyan="" magenta="" red=""
  else
    if command -v tput >/dev/null 2>&1 && [ -n "$TERM" ]; then
      bold=$(tput bold 2>/dev/null || printf '\033[1m')
      reset=$(tput sgr0 2>/dev/null || printf '\033[0m')
      blue=$(tput setaf 4 2>/dev/null || printf '\033[34m')
      green=$(tput setaf 2 2>/dev/null || printf '\033[32m')
      yellow=$(tput setaf 3 2>/dev/null || printf '\033[33m')
      cyan=$(tput setaf 6 2>/dev/null || printf '\033[36m')
      magenta=$(tput setaf 5 2>/dev/null || printf '\033[35m')
      red=$(tput setaf 1 2>/dev/null || printf '\033[31m')
    else
      bold='\033[1m'
      reset='\033[0m'
      blue='\033[34m'
      green='\033[32m'
      yellow='\033[33m'
      cyan='\033[36m'
      magenta='\033[35m'
      red='\033[31m'
    fi
  fi
}
setup_colors

API_BASE="https://breach.vip"

print_kv() {
  printf "${bold}%s:${reset} %s\n" "$1" "$2"
}

print_section() {
  printf "\n${bold}%s:${reset}\n" "$1"
}

format_case() {
  echo "$(tr '[:lower:]' '[:upper:]' <<<${1:0:1})${1:1}"
}

make_request() {
  local payload="$1"
  local temp_file=$(mktemp)

  local http_code=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "$payload" \
    -w "%{http_code}" \
    -o "$temp_file" \
    "${API_BASE}/api/search")

  local response=$(cat "$temp_file")
  rm -f "$temp_file"

  if [ -z "$http_code" ] || [ "$http_code" = "000" ]; then
    printf "${red}Error:${reset} Connection failed - check network connectivity to %s\n" "$API_BASE" >&2
    exit 1
  fi

  if [ "$http_code" -ne 200 ]; then
    case "$http_code" in
    400)
      error_msg=$(echo "$response" | jq -r '.error // "Bad request"' 2>/dev/null || echo "Bad request")
      printf "${red}Error:${reset} Bad request: ${red}%s${reset}\n" "$error_msg" >&2
      ;;
    405)
      printf "${red}Error:${reset} Method not allowed\n" >&2
      ;;
    500)
      printf "${red}Error:${reset} Internal server error\n" >&2
      ;;
    *)
      printf "${red}Error:${reset} HTTP %s\n" "$http_code" >&2
      if [ -n "$response" ]; then
        printf "Response: %s\n" "$response" >&2
      fi
      ;;
    esac
    exit 1
  fi

  echo "$response"
}

validate_categories() {
  local categories="$1"
  if [ -n "$categories" ] && [ "$categories" != "minecraft" ]; then
    echo "${red}Error:${reset} Invalid category '${categories}'. Only 'minecraft' is currently supported." >&2
    exit 1
  fi
}

validate_term() {
  local term="$1"
  local wildcard="$2"

  if [ ${#term} -lt 1 ] || [ ${#term} -gt 99 ]; then
    echo "${red}Error:${reset} Search term must be between 1 and 99 characters" >&2
    exit 1
  fi

  if [ "$wildcard" = 1 ]; then
    if [[ "$term" =~ ^[\*\?] ]]; then
      echo "${red}Error:${reset} Wildcard search terms cannot begin with * or ?" >&2
      exit 1
    fi
  fi
}

show_help() {
  printf "\n${bold}${magenta}BREACH VIP CLIENT${reset} ${yellow}üîç${reset}\n"
  printf "${cyan}Breach database search across multiple field types${reset}\n\n"

  printf "${bold}${green}USAGE${reset}\n"
  printf "  ${cyan}$(basename "$0")${reset} ${yellow}<term>${reset} ${green}<fields...>${reset} ${blue}[options]${reset}\n\n"

  printf "${bold}${green}FIELDS${reset}\n"
  printf "  ${yellow}ip${reset}           Search in IP addresses\n"
  printf "  ${yellow}domain${reset}       Search in domain names\n"
  printf "  ${yellow}steamid${reset}      Search in Steam IDs\n"
  printf "  ${yellow}name${reset}         Search in names\n"
  printf "  ${yellow}uuid${reset}         Search in UUIDs\n"
  printf "  ${yellow}username${reset}     Search in usernames\n"
  printf "  ${yellow}email${reset}        Search in email addresses\n"
  printf "  ${yellow}discordid${reset}    Search in Discord IDs\n"
  printf "  ${yellow}phone${reset}        Search in phone numbers\n"
  printf "  ${yellow}password${reset}     Search in passwords\n\n"

  printf "${bold}${yellow}OPTIONS${reset}\n"
  printf "  ${yellow}-w, --wildcard${reset}       Enable wildcards (* and ?)\n"
  printf "  ${yellow}-s, --case-sensitive${reset} Enable case-sensitive search\n"
  printf "  ${yellow}-c, --categories${reset}     Filter by categories (minecraft only)\n"
  printf "  ${yellow}-j, --json${reset}           Output raw JSON\n"
  printf "  ${yellow}-q, --quiet${reset}          Suppress colored output\n\n"

  printf "${bold}${red}WILDCARD PATTERNS${reset}\n"
  printf "  ${yellow}*${reset}  Match ${bold}zero or more${reset} characters\n"
  printf "  ${yellow}?${reset}  Match ${bold}exactly one${reset} character\n\n"

  printf "${bold}${green}EXAMPLES${reset}\n"
  printf "  ${cyan}Search for email:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}john.doe@example.com${reset} ${green}email${reset}\n\n"

  printf "  ${cyan}Search across multiple fields:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}192.168.1.1${reset} ${green}ip email username${reset}\n\n"

  printf "  ${cyan}Search by Steam ID:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}76561198000000000${reset} ${green}steamid${reset}\n\n"

  printf "  ${cyan}Search by Discord ID:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}123456789012345678${reset} ${green}discordid${reset}\n\n"

  printf "  ${cyan}Search by domain:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}example.com${reset} ${green}domain${reset}\n\n"

  printf "  ${cyan}Search by phone number:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}\"+1-555-0123\"${reset} ${green}phone${reset}\n\n"

  printf "  ${cyan}Search by UUID:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}550e8400-e29b-41d4-a716-446655440000${reset} ${green}uuid${reset}\n\n"

  printf "  ${cyan}Wildcard email search:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}\"john*@example.com\"${reset} ${green}email${reset} ${blue}--wildcard${reset}\n\n"

  printf "  ${cyan}Search username with pattern:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}\"admin*\"${reset} ${green}username${reset} ${blue}--wildcard${reset}\n\n"

  printf "  ${cyan}With category filter:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}\"user@minecraft.net\"${reset} ${green}email${reset} ${blue}--categories${reset} minecraft\n\n"

  printf "  ${cyan}JSON output:${reset}\n"
  printf "    ${green}\$${reset} ${cyan}$(basename "$0")${reset} ${yellow}test123${reset} ${green}username password${reset} ${blue}--json${reset}\n\n"
}

format_search_results() {
  local response="$1"

  if [ -z "$response" ] || ! echo "$response" | jq empty 2>/dev/null; then
    printf "${red}Error:${reset} Invalid response from server\n" >&2
    return 1
  fi

  local results_count=$(echo "$response" | jq -r '.results | length' 2>/dev/null || echo "0")

  if [ -z "$results_count" ] || [ "$results_count" -eq 0 ]; then
    printf "${yellow}No results found${reset}\n"
    return
  fi

  printf "${bold}Found ${green}%s${reset} result(s):\n\n" "$results_count"

  echo "$response" | jq -r '.results | group_by(.source) | .[] | "\(.[0].source)|\(length)|\(. | tostring)"' |
    while IFS="|" read -r source count items_json; do
      printf "${bold}${blue}%s${reset} (${yellow}%s${reset} record(s))\n" "$source" "$count"

      echo "$items_json" | jq -r '.[] | @json' | while read -r item; do
        local categories=$(echo "$item" | jq -r 'if .categories | type == "array" then .categories | join(", ") else .categories end')

        printf "  ${cyan}Categories:${reset} ${magenta}%s${reset}\n" "$categories"

        echo "$item" | jq -r 'to_entries | map(select(.key != "source" and .key != "categories")) | .[] | "\(.key)|\(.value)"' |
          while IFS="|" read -r key value; do
            case "$key" in
            "password")
              printf "  ${cyan}%s:${reset} ${red}%s${reset}\n" "$(format_case "$key")" "$value"
              ;;
            "email")
              printf "  ${cyan}%s:${reset} ${green}%s${reset}\n" "$(format_case "$key")" "$value"
              ;;
            "ip")
              printf "  ${cyan}%s:${reset} ${blue}%s${reset}\n" "$(format_case "$key")" "$value"
              ;;
            "domain")
              printf "  ${cyan}%s:${reset} ${blue}%s${reset}\n" "$(format_case "$key")" "$value"
              ;;
            "steamid")
              printf "  ${cyan}%s:${reset} ${yellow}%s${reset}\n" "Steam ID" "$value"
              ;;
            "discordid")
              printf "  ${cyan}%s:${reset} ${magenta}%s${reset}\n" "Discord ID" "$value"
              ;;
            "phone")
              printf "  ${cyan}%s:${reset} ${green}%s${reset}\n" "$(format_case "$key")" "$value"
              ;;
            "uuid")
              printf "  ${cyan}%s:${reset} ${cyan}%s${reset}\n" "UUID" "$value"
              ;;
            *)
              printf "  ${cyan}%s:${reset} %s\n" "$(format_case "$key")" "$value"
              ;;
            esac
          done
        printf "\n"
      done
      printf "\n"
    done
}

if [ -z "$argc_term" ]; then
  show_help
  exit 0
fi

if [ ${#argc_fields[@]} -eq 0 ]; then
  echo "${red}Error:${reset} At least one field type must be specified" >&2
  echo "Valid fields: ip, domain, steamid, name, uuid, username, email, discordid, phone, password" >&2
  echo "Usage: $(basename "$0") <term> <fields...> [options]" >&2
  exit 1
fi

valid_fields=("ip" "domain" "steamid" "name" "uuid" "username" "email" "discordid" "phone" "password")
for field in "${argc_fields[@]}"; do
  if ! [[ " ${valid_fields[@]} " =~ " ${field} " ]]; then
    echo "${red}Error:${reset} Invalid field type '${field}'" >&2
    echo "Valid fields: ip, domain, steamid, name, uuid, username, email, discordid, phone, password" >&2
    exit 1
  fi
done

validate_term "$argc_term" "$argc_wildcard"
validate_categories "$argc_categories"

fields_json=$(printf '%s\n' "${argc_fields[@]}" | jq -R . | jq -s .)

payload="{\"term\":\"$argc_term\",\"fields\":$fields_json"

if [ "$argc_wildcard" = 1 ]; then
  payload="$payload,\"wildcard\":true"
fi

if [ "$argc_case_sensitive" = 1 ]; then
  payload="$payload,\"case_sensitive\":true"
fi

if [ -n "$argc_categories" ]; then
  payload="$payload,\"categories\":[\"$argc_categories\"]"
fi

payload="$payload}"

response=$(make_request "$payload")

if [ "$argc_json" = 1 ]; then
  echo "$response" | jq
else
  format_search_results "$response"
fi
